package platform.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.SwingUtilities;

import platform.adapter.LoginKeyAdapter;
import platform.adapter.LoginMouseAdapter;
import platform.tools.ImageFactory;
import platform.widget.URLLabel;
import platform.widget.WidgetFactory;

import com.sun.awt.AWTUtilities;

public class LoginUI extends JFrame {

    private static final long serialVersionUID = -3745375316666171374L;
    private static final int FRAME_WIDTH = 355;
    private static final int FRAME_HEIGHT = 240;
    private static final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private Font default_font = new Font("ÀŒÃÂ", Font.PLAIN, 13);
    private JLabel bg_up_label;
    private JLabel bg_center_label;
    private JLabel bg_down_label;
    private JLabel close_button;
    private JLabel help_button;
    private JLabel banner_label;
    private JLabel login_processbar_out_label;
    private JLabel login_processbar_in_label;
    private JLabel login_processbar_bg;
    private JLabel info_label;
    private JLabel account_label;
    private JLabel password_label;
    private JLabel login_button;
    private JLabel set_button;
    private URLLabel registerAccountUrlLabel;
    private URLLabel getBackPasswordUrlLabel;
    private URLLabel articleUrlLabel;
    private JComboBox account_input;
    private JPasswordField password_input;
    private JCheckBox memory_check;
    private JCheckBox hide_check;
    private JCheckBox agree_check;
    private LoginKeyAdapter keyAdapter = new LoginKeyAdapter(this);
    private LoginMouseAdapter mouseAdapter = new LoginMouseAdapter(this);
    private boolean isLoginProcessStart = false;

    public LoginUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setSize(FRAME_WIDTH, FRAME_HEIGHT);
        setLocation(screenSize.width / 2 - getWidth() / 2, (int) (screenSize.getHeight() / 2 - getHeight() / 2));

        getLayeredPane().add(getHelp_button(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getClose_button(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getLogin_processbar_out_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getLogin_processbar_in_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getLogin_processbar_bg(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getInfo_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getAccount_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getPassword_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getAccount_input(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getMemory_check(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getHide_check(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getAgree_check(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getArticleUrlLabel(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getGetBackPasswordUrlLabel(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getRegisterAccountUrlLabel(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getBanner_label(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getSet_button(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getLogin_button(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getPassword_input(), new Integer(Integer.MIN_VALUE));

        getLayeredPane().add(getBg_up_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getBg_center_label(), new Integer(Integer.MIN_VALUE));
        getLayeredPane().add(getBg_down_label(), new Integer(Integer.MIN_VALUE));

        ((JPanel) getContentPane()).setOpaque(false);

        setUndecorated(true);
        addKeyListener(keyAdapter);
        addMouseListener(mouseAdapter);
        addMouseMotionListener(mouseAdapter);
    }// </editor-fold>  

    public JLabel getBg_up_label() {
        if (bg_up_label == null) {
            bg_up_label = new JLabel(new ImageIcon(ImageFactory.getLoginBgUpImage().getScaledInstance(355, 130, Image.SCALE_DEFAULT)));
            bg_up_label.setBounds(0, 0, 355, 130);
        }
        return bg_up_label;
    }

    public JLabel getBg_center_label() {
        if (bg_center_label == null) {
            bg_center_label = new JLabel(new ImageIcon(ImageFactory.getLoginBgCenterImage().getScaledInstance(355, 40, Image.SCALE_DEFAULT)));
            bg_center_label.setBounds(0, 130, 355, 40);
        }
        return bg_center_label;
    }

    public JLabel getBg_down_label() {
        if (bg_down_label == null) {
            bg_down_label = new JLabel(new ImageIcon(ImageFactory.getLoginBgDownImage().getScaledInstance(355, 70, Image.SCALE_DEFAULT)));
            bg_down_label.setBounds(0, 170, 355, 70);
        }
        return bg_down_label;
    }

    public JLabel getClose_button() {
        if (close_button == null) {
            close_button = WidgetFactory.createCloseButton(40, 22);
            close_button.setBounds(300, 0, 40, 22);
            close_button.addMouseListener(mouseAdapter);
        }
        return close_button;
    }

    public JLabel getHelp_button() {
        if (help_button == null) {
            help_button = WidgetFactory.createHelpButton(21, 22);
            help_button.setBounds(275, 0, 21, 22);
        }
        return help_button;
    }

    public JLabel getLogin_button() {
        if (login_button == null) {
            login_button = new JLabel(new ImageIcon(ImageFactory.getButtonOut2(70, 25, true))) {

                private static final long serialVersionUID = 1069610959002409150L;

                @Override
                public void paint(Graphics g) {
                    super.paint(g);

                    Icon icon = getIcon();
                    if (icon != null && icon instanceof ImageIcon) {
                        ImageIcon imageIcon = (ImageIcon) icon;
                        BufferedImage bufferedImage = new BufferedImage(imageIcon.getIconWidth(), imageIcon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
                        Graphics2D g2 = (Graphics2D) bufferedImage.getGraphics();
                        g2.drawImage(imageIcon.getImage(), 0, 0, null);
                        g2.setColor(Color.BLACK);
                        g2.drawString("µ«¬º", 23, 16);
                        setIcon(new ImageIcon(bufferedImage.getScaledInstance(imageIcon.getIconWidth(), imageIcon.getIconHeight(), Image.SCALE_DEFAULT)));
                    }
                }
            };
            login_button.setOpaque(false);
            login_button.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseEntered(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonOn1(70, 25, true)));
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonOut2(70, 25, true)));
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonDown1(70, 25, true)));
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonOut2(70, 25, true)));
                }
            });
            login_button.setBounds(270, 205, 70, 25);
            login_button.setName("login_button");
        }
        return login_button;
    }
    private int setButtonClickTime = 0;

    public JLabel getSet_button() {
        if (set_button == null) {
            set_button = new JLabel(new ImageIcon(ImageFactory.getButtonOut1(70, 25, true))) {

                private static final long serialVersionUID = 1069610959002409150L;

                @Override
                public void paint(Graphics g) {
                    super.paint(g);
                    Icon icon = getIcon();
                    if (icon != null && icon instanceof ImageIcon) {
                        ImageIcon imageIcon = (ImageIcon) icon;
                        BufferedImage bufferedImage = new BufferedImage(imageIcon.getIconWidth(), imageIcon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
                        Graphics2D g2 = (Graphics2D) bufferedImage.getGraphics();
                        g2.drawImage(imageIcon.getImage(), 0, 0, null);
                        g2.setColor(Color.BLACK);
                        g2.drawString("…Ë÷√" + (setButtonClickTime % 2 == 0 ? "°¸" : "°˝"), 18, 16);
                        setIcon(new ImageIcon(bufferedImage.getScaledInstance(imageIcon.getIconWidth(), imageIcon.getIconHeight(), Image.SCALE_DEFAULT)));
                    }
                }
            };
            set_button.setOpaque(false);
            set_button.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseEntered(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonOn1(70, 25, true)));
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonOut1(70, 25, true)));
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonDown1(70, 25, true)));
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    JLabel label = (JLabel) e.getSource();
                    label.setIcon(new ImageIcon(ImageFactory.getButtonOut1(70, 25, true)));
                }

                @Override
                public void mouseClicked(MouseEvent e) {
                    setButtonClickTime++;
                }
            });
            set_button.setBounds(20, 205, 70, 25);
            set_button.setName("set_name");

        }
        return set_button;
    }

    public JLabel getBanner_label() {
        if (banner_label == null) {
            banner_label = new JLabel(new ImageIcon(ImageFactory.getLoginBannerImage().getScaledInstance(351, 70, Image.SCALE_DEFAULT)));
            banner_label.setName("banner_label");
            banner_label.setBounds(2, 25, 350, 70);
        }
        return banner_label;
    }

    public JLabel getLogin_processbar_in_label() {
        if (login_processbar_in_label == null) {
            login_processbar_in_label = new JLabel(new ImageIcon(ImageFactory.getLoginProcessbarInImage().getScaledInstance(75, 4, Image.SCALE_DEFAULT)));
            login_processbar_in_label.setBounds((int) Math.random() * (355 - 75), 95, 75, 4);
        }
        return login_processbar_in_label;
    }

    public JLabel getLogin_processbar_out_label() {
        if (login_processbar_out_label == null) {
            login_processbar_out_label = new JLabel(new ImageIcon(ImageFactory.getLoginProcessbarOutImage().getScaledInstance(355, 4, Image.SCALE_DEFAULT)));
            login_processbar_out_label.setBounds(0, 95, 355, 4);
        }
        return login_processbar_out_label;
    }

    public JLabel getLogin_processbar_bg() {
        if (login_processbar_bg == null) {
            login_processbar_bg = new JLabel(new ImageIcon(ImageFactory.getLoginProcessbarBgImage().getScaledInstance(355, 4, Image.SCALE_SMOOTH)));
            login_processbar_bg.setBounds(0, 95, 355, 4);
        }
        return login_processbar_bg;
    }

    public JLabel getInfo_label() {
        if (info_label == null) {
            info_label = new JLabel("«Î ‰»Î’À∫≈∫Õ√‹¬Î°√");
            info_label.setBounds(20, 105, 120, 15);
            info_label.setFont(default_font);
        }
        return info_label;
    }

    public JLabel getAccount_label() {
        if (account_label == null) {
            account_label = new JLabel("’À∫≈°√");
            account_label.setFont(default_font);
            account_label.setFont(default_font);
            account_label.setBounds(20, 125, 40, 20);
        }
        return account_label;
    }

    public JLabel getPassword_label() {
        if (password_label == null) {
            password_label = new JLabel("√‹¬Î°√");
            password_label.setFont(default_font);
            password_label.setBounds(20, 152, 40, 20);
        }
        return password_label;
    }

    public JComboBox getAccount_input() {
        if (account_input == null) {
            account_input = new JComboBox();
            account_input.setEditable(true);
            account_input.setBounds(60, 125, 220, 20);
        }
        return account_input;
    }

    public JPasswordField getPassword_input() {
        if (password_input == null) {
            password_input = new JPasswordField();
            password_input.setEchoChar('*');
            password_input.setBounds(60, 152, 220, 20);
        }
        return password_input;
    }

    public JCheckBox getMemory_check() {
        if (memory_check == null) {
            memory_check = new JCheckBox("º«◊°√‹¬Î");
            memory_check.setFont(default_font);
            memory_check.setOpaque(false);
            memory_check.setBounds(50, 180, 80, 20);
        }
        return memory_check;
    }

    public JCheckBox getHide_check() {
        if (hide_check == null) {
            hide_check = new JCheckBox("“˛…Ìµ«¬º");
            hide_check.setFont(default_font);
            hide_check.setOpaque(false);
            hide_check.setBounds(140, 180, 80, 20);
        }
        return hide_check;
    }

    public JCheckBox getAgree_check() {
        if (agree_check == null) {
            agree_check = new JCheckBox();
            agree_check.setFont(default_font);
            agree_check.setOpaque(false);
            agree_check.setBounds(220, 180, 20, 20);
        }
        return agree_check;
    }

    public URLLabel getRegisterAccountUrlLabel() {
        if (registerAccountUrlLabel == null) {
            registerAccountUrlLabel = new URLLabel("…Í«Î’À∫≈");
            registerAccountUrlLabel.setFont(default_font);
            registerAccountUrlLabel.setBounds(290, 125, 80, 20);
            registerAccountUrlLabel.setForeground(Color.BLUE);
        }
        return registerAccountUrlLabel;
    }

    public URLLabel getGetBackPasswordUrlLabel() {
        if (getBackPasswordUrlLabel == null) {
            getBackPasswordUrlLabel = new URLLabel("Õ¸¡À√‹¬Î£ø");
            getBackPasswordUrlLabel.setFont(default_font);
            getBackPasswordUrlLabel.setBounds(290, 152, 80, 20);
            getBackPasswordUrlLabel.setForeground(Color.BLUE);
        }
        return getBackPasswordUrlLabel;
    }

    public URLLabel getArticleUrlLabel() {
        if (articleUrlLabel == null) {
            articleUrlLabel = new URLLabel("Õ¨“‚ÃıøÓ");
            articleUrlLabel.setFont(default_font);
            articleUrlLabel.setBounds(241, 180, 60, 20);
            articleUrlLabel.setForeground(Color.BLUE);
        }
        return articleUrlLabel;
    }

    public void showMe() {
        setVisible(true);

        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                AWTUtilities.setWindowShape(LoginUI.this, new RoundRectangle2D.Float(0, 0, getWidth(), getHeight(), 8, 8));
                // AWTUtilities.setWindowOpacity(LoginUI.this, 0.93f);
            }
        });
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    int x;
                    int y;
                    while (true) {
                        if (isLoginProcessStart) {
                            Thread.sleep(8);
                            x = (getLogin_processbar_in_label().getX() + 1) % (FRAME_WIDTH - getLogin_processbar_in_label().getWidth());
                            y = getLogin_processbar_in_label().getY();
                            getLogin_processbar_in_label().setLocation(x, y);
                        } else {
                            Thread.sleep(15);
                        }
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();

        isLoginProcessStart = true;
    }

    public static void main(String[] args) {
        new LoginUI().showMe();
    }
}
